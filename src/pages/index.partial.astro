---
import catalog, { columns, date } from '../data.ts';
import { type QueryParams } from '../../converter/catalog.ts';

export const partial = true;

export function getMeta({ searchParams }: URL) {
	const params: QueryParams = {
		search: {
			term: searchParams.get('q'),
			field: searchParams.get('where')
		},
		sort: {
			by: searchParams.get('sort'),
			desc: !!searchParams.get('sortDesc'),
		},
		filter: {
			certificate: searchParams.get('certificate'),
			format: searchParams.get('format'),
			genre: searchParams.get('genre'),
			country: searchParams.get('country'),
			picture: searchParams.get('picture'),
		}
	}

	return {
		params,
		date
	}
}

const { params } = getMeta(Astro.url);
const data = catalog.query(params);

const dlCols = [
	'cast',
	'certificate',
	'countries',
	'directors',
	'duration',
	'format',
	'genre',
	'picture',
	'originalTitle',
	'year'
] as const;

const colTitles = Object.fromEntries(dlCols.map(col => {
	const title = columns.find(c=>c.key === col)?.title ?? (col[0].toUpperCase()+col.slice(1));
	return [col, title]
}));
---
<output>{data.length}</output> results
<style lang='scss'>
	@use '../tokens.scss' as theme;
	@use '../utils.scss' as utils;

.list {
	@include utils.grid();
	// align-items: start;

	> * {
		@include utils.card;
	}
}


dl:has(div) {
	display: block;
	column-width: 200px;
	gap: theme.$spacingM;
	$rowHeight: 1em;
	

	div{ 
		padding-block: calc($rowHeight / 2);
		border-bottom: theme.$border solid theme.$lightest;
		display: flex;
		gap: 0.25em;
	}

	dt {
		font-weight: bold;
		flex-basis: 40%;
	}

	dd {
		margin-inline: 0;
		flex-basis: 60%;
		line-height: calc($rowHeight + theme.$border);
	}
}

.warn {
	background-color: #fceae3;
	border: 1px solid #f7e1b5;
    color: #9d4e26;
	border-radius: 3px;
	margin: 1em 0 0;
	padding: 0.5em;
}
</style>

<div class=list>
{data.map(row=>
	<article>
		<h2>{row.title}</h2>
		<dl>
			{dlCols.map(field => !(Array.isArray(row[field]) ? !!row[field].length : !!row[field]) ? null : <div>
				<dt>{colTitles[field]}</dt>
				<dd>{Array.isArray(row[field]) ? row[field].join(', ') : row[field]}</dd>
			</div>)}
		</dl>
		{row.highlight(params.search?.term??null, match=><mark>{match}</mark>).map(s=><>{s}<br /></>)}
		{row.warnings.length ? <div class="warn">Data warnings:
		<ul>{row.warnings.map(w=><li>{w}</li>)}</ul>
		</div> : null}
	</article>
)}
</div>
